@page "/login"
@using System.ComponentModel.DataAnnotations
@using BlazorApp_Meta_UI.Models
@using BlazorApp_Meta_UI.Services
@inject Authentication authService
@inject NavigationManager nv

<div class="d-flex align-items-center justify-content-center">
    <div class="card shadow-lg border-0" style="width: 400px; border-radius: 15px;">
        <div class="card-body p-5">
            <h3 class="text-center mb-4 p-3 bg-light rounded d-none d-md-block"
                style="white-space: nowrap; color: #ebe6fa; -webkit-text-stroke: 1px #654ea3;">
                Welcome Back</h3>            
             <p class="text-center text-muted mb-4">Please login to your account</p>

            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Email Input -->
                <div class="mb-3">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" class="form-control shadow-sm" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                </div>

                <!-- Password Input with Toggle -->
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <InputText id="password"
                                   type="@PasswordInputType"
                                   class="form-control shadow-sm"
                                   @bind-Value="loginModel.Password"
                                   placeholder="Enter your password" />
                        <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                            <i class="bi @PasswordToggleIcon"></i>
                        </button>
                    </div>
                </div>

                <!-- Login Button -->
                <button type="submit" class="btn gradient-btn-light w-100 rounded-pill shadow-sm mt-3">Login</button>
            </EditForm>

            <!-- Divider -->
            <div class="text-center my-3">
                <span class="text-muted">Or login with:</span>
            </div>

            <!-- Google Button -->
            <button class="btn gradient-btn-light w-100 rounded-pill shadow-sm">
                <i class="bi bi-google"></i> Continue with Google
            </button>

            <!-- Links -->
            <div class="text-center mt-4">
                <a href="/forgot-password" class="text-decoration-none text-primary">Forgot Password?</a>
                <br />
                <a href="/signup" class="text-decoration-none text-primary">Don’t have an account? Sign Up</a>
            </div>
        </div>
    </div>
</div>
<style>
    .card {
        box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.2); /* Stronger shadow */
        border-radius: 15px; /* Smooth corners */
        border: none;
        padding: 20px; /* Optional padding for inner spacing */
        overflow: hidden; /* Prevent content overflow */
    }

    .btn {
        font-size: 1rem;
        font-weight: bold;
    }

    .gradient-btn-light {
        background: linear-gradient(to right, #fbc2eb, #a6c1ee); /* Pink to light blue gradient */
        color: white;
        border: none;
    }

        .gradient-btn-light:hover {
            background: linear-gradient(to right, #a6c1ee, #fbc2eb); /* Reverse gradient on hover */
            color: white;
        }

    .input-group .btn {
        border-radius: 0 5px 5px 0;
    }

    input {
        font-size: 1rem;
        padding: 0.8rem;
    }

    .text-muted {
        font-size: 0.9rem;
    }

</style>
@code {
    private LoginModel loginModel = new LoginModel();
    private bool IsPasswordVisible = false;

   

    private string PasswordInputType => IsPasswordVisible ? "text" : "password";
    private string PasswordToggleIcon => IsPasswordVisible ? "bi-eye-slash" : "bi-eye";

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }

    private async Task HandleLogin()
    {
        // Validate login fields
        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            Console.WriteLine("Please fill in both email and password.");
            return;
        }

        try
        {
            // Interact with backend or authentication service
            bool isLoginSuccessful = await authService.LoginAsync(loginModel);

            if (isLoginSuccessful)
            {
                Console.WriteLine("Login successful! Redirecting...");
                nv.NavigateTo("/home");  // Adjust to the correct page
            }
            else
            {
                Console.WriteLine("Login failed. Please check your credentials.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred during login: {ex.Message}");
        }
    }


}
