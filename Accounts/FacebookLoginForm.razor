@page "/fblogin"
@inject IJSRuntime JS
@inject HttpClient Http

<div>
    <!-- Existing form design -->
    <button @onclick="LoginWithFacebook" class="btn btn-primary">Login with Facebook</button>
</div>

@code {
    private async Task LoginWithFacebook()
    {
        try
        {
            // Get the Facebook login access token
            var userAccessToken = await JS.InvokeAsync<string>("facebookLogin");
            Console.WriteLine("User Access Token: " + userAccessToken);  // Debug output

            if (!string.IsNullOrEmpty(userAccessToken))
            {
                // Ensure we send the token in the request body
                var response = await Http.PostAsJsonAsync("http://127.0.0.1:8000/api/facebook/save-token", new { AccessToken = userAccessToken });

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Token successfully saved!");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error: {errorResponse}");
                }
            }
            else
            {
                Console.WriteLine("Access token is empty or null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

}
<script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js"></script>

<script>
    window.fbAsyncInit = function () {
        FB.init({
            appId: '410534332102103', // Replace with your Facebook App ID
            cookie: true,
            xfbml: true,
            version: 'v12.0'
        });
    };

    async function facebookLogin() {
        return new Promise((resolve, reject) => {
            FB.login(function (response) {
                if (response.authResponse) {
                    console.log("Access Token:", response.authResponse.accessToken);
                    resolve(response.authResponse.accessToken);
                } else {
                    reject('User cancelled login or did not fully authorize.');
                }
            }, {
                scope: 'pages_show_list,pages_manage_metadata,pages_read_engagement',
                auth_type: 'reauthorize'
            });
        });
    }
</script>
